#!/usr/bin/env node

/**
 * Documentation Generator for OSWeDev
 * 
 * This script automatically generates documentation for crucial and important modules
 * of the OSWeDev project, focusing on key functional points in a beginner-friendly way.
 */

const fs = require('fs');
const path = require('path');

class OSWeDevDocGenerator {
    constructor() {
        this.projectRoot = path.resolve(__dirname, '..');
        this.modulesPath = path.join(this.projectRoot, 'src', 'shared', 'modules');
        this.outputPath = path.join(this.projectRoot, 'docs');
        
        // Define crucial modules based on functionality and dependencies
        this.crucialModules = [
            'API',
            'DAO',
            'AccessPolicy',
            'VO',
            'Translation',
            'Menu',
            'Request',
            'File',
            'Mailer',
            'DashboardBuilder',
            'DataImport',
            'DataExport',
            'Params',
            'Trigger',
            'BGThread',
            'Cron',
            'CMS',
            'Commerce',
            'Stats',
            'Supervision'
        ];
        
        // Handle special files that don't follow the directory pattern
        this.specialModules = {
            'Module': path.join(this.modulesPath, 'Module.ts'),
            'ModulesManager': path.join(this.modulesPath, 'ModulesManager.ts'),
            'VOsTypesManager': path.join(this.modulesPath, 'VOsTypesHandler.ts'),
            'VOsTypesHandler': path.join(this.modulesPath, 'VOsTypesHandler.ts')
        };
    }

    /**
     * Main documentation generation method
     */
    async generate() {
        console.log('üöÄ Starting OSWeDev documentation generation...');
        
        try {
            await this.ensureOutputDirectory();
            const documentation = await this.analyzeModules();
            await this.generateMarkdownDocs(documentation);
            
            console.log('‚úÖ Documentation generation completed successfully!');
            console.log(`üìÅ Documentation available at: ${this.outputPath}`);
        } catch (error) {
            console.error('‚ùå Error generating documentation:', error);
            process.exit(1);
        }
    }

    /**
     * Ensure output directory exists
     */
    async ensureOutputDirectory() {
        if (!fs.existsSync(this.outputPath)) {
            fs.mkdirSync(this.outputPath, { recursive: true });
        }
    }

    /**
     * Analyze all crucial modules and extract documentation
     */
    async analyzeModules() {
        const documentation = {
            overview: this.generateOverview(),
            modules: []
        };

        // First, handle special modules (single files)
        for (const [moduleName, filePath] of Object.entries(this.specialModules)) {
            if (fs.existsSync(filePath)) {
                console.log(`üìñ Analyzing special module: ${moduleName}`);
                const moduleDoc = await this.analyzeSpecialModule(moduleName, filePath);
                if (moduleDoc) {
                    documentation.modules.push(moduleDoc);
                }
            }
        }

        // Then handle regular modules (directories)
        for (const moduleName of this.crucialModules) {
            const modulePath = path.join(this.modulesPath, moduleName);
            
            if (fs.existsSync(modulePath)) {
                console.log(`üìñ Analyzing module: ${moduleName}`);
                const moduleDoc = await this.analyzeModule(moduleName, modulePath);
                if (moduleDoc) {
                    documentation.modules.push(moduleDoc);
                }
            } else {
                console.log(`‚ö†Ô∏è  Module not found: ${moduleName}`);
            }
        }

        return documentation;
    }

    /**
     * Generate project overview
     */
    generateOverview() {
        return {
            title: 'OSWeDev - Aper√ßu du projet',
            description: 'OSWeDev est une solution OpenSource bas√©e sur NodeJS, VueJS et TypeScript, con√ßue pour cr√©er des applications web robustes et modulaires.',
            architecture: {
                'Backend': 'NodeJS avec TypeScript et Express',
                'Frontend': 'VueJS avec TypeScript',
                'Base de donn√©es': 'PostgreSQL',
                'Tests': 'PlayWright pour les tests end-to-end',
                'Build': 'EsBuild pour la compilation'
            },
            keyFeatures: [
                'Architecture modulaire avec 80+ modules',
                'G√©n√©rateur de code automatique',
                'Syst√®me de permissions et d\'acc√®s',
                'API REST compl√®te',
                'Interface d\'administration',
                'Gestion des donn√©es (import/export)',
                'Syst√®me de notifications et emails',
                'Tableaux de bord personnalisables',
                'Internationalisation compl√®te'
            ]
        };
    }

    /**
     * Analyze special module (single file)
     */
    async analyzeSpecialModule(moduleName, filePath) {
        try {
            const moduleContent = fs.readFileSync(filePath, 'utf8');
            const moduleDoc = {
                name: moduleName,
                path: filePath,
                description: this.extractModuleDescription(moduleContent, moduleName),
                functionality: this.extractFunctionality(moduleContent, moduleName),
                keyMethods: this.extractKeyMethods(moduleContent),
                dependencies: this.extractDependencies(moduleContent),
                usageExample: this.generateUsageExample(moduleName, moduleContent)
            };

            return moduleDoc;
        } catch (error) {
            console.error(`Error analyzing special module ${moduleName}:`, error);
            return null;
        }
    }
    async analyzeModule(moduleName, modulePath) {
        try {
            const moduleFiles = this.getModuleFiles(modulePath);
            const mainModuleFile = this.findMainModuleFile(moduleFiles, moduleName);
            
            if (!mainModuleFile) {
                return null;
            }

            const moduleContent = fs.readFileSync(mainModuleFile, 'utf8');
            const moduleDoc = {
                name: moduleName,
                path: modulePath,
                description: this.extractModuleDescription(moduleContent, moduleName),
                functionality: this.extractFunctionality(moduleContent, moduleName),
                keyMethods: this.extractKeyMethods(moduleContent),
                dependencies: this.extractDependencies(moduleContent),
                usageExample: this.generateUsageExample(moduleName, moduleContent)
            };

            return moduleDoc;
        } catch (error) {
            console.error(`Error analyzing module ${moduleName}:`, error);
            return null;
        }
    }

    /**
     * Get all files in a module directory
     */
    getModuleFiles(modulePath) {
        const files = [];
        
        const readDir = (dirPath) => {
            if (fs.statSync(dirPath).isDirectory()) {
                const items = fs.readdirSync(dirPath);
                items.forEach(item => {
                    const itemPath = path.join(dirPath, item);
                    if (fs.statSync(itemPath).isDirectory()) {
                        readDir(itemPath);
                    } else if (item.endsWith('.ts')) {
                        files.push(itemPath);
                    }
                });
            } else if (dirPath.endsWith('.ts')) {
                files.push(dirPath);
            }
        };

        readDir(modulePath);
        return files;
    }

    /**
     * Find the main module file
     */
    findMainModuleFile(files, moduleName) {
        // Look for Module{Name}.ts pattern first
        const modulePattern = files.find(f => 
            f.includes(`Module${moduleName}.ts`) || 
            f.endsWith(`${moduleName}.ts`) ||
            f.includes(`Module${moduleName}`)
        );
        
        if (modulePattern) return modulePattern;
        
        // If not found, take the first .ts file
        return files.find(f => f.endsWith('.ts'));
    }

    /**
     * Extract module description from comments and code
     */
    extractModuleDescription(content, moduleName) {
        const descriptions = {
            'Module': 'Classe de base pour tous les modules du syst√®me. D√©finit l\'interface commune et la gestion du cycle de vie des modules.',
            'ModulesManager': 'Gestionnaire central de tous les modules. Coordonne l\'enregistrement, l\'activation et la communication entre modules.',
            'API': 'Module de gestion des API REST. Fournit l\'infrastructure pour exposer les fonctionnalit√©s via HTTP.',
            'DAO': 'Data Access Object - Couche d\'acc√®s aux donn√©es. G√®re toutes les op√©rations CRUD avec la base de donn√©es PostgreSQL.',
            'AccessPolicy': 'Syst√®me de gestion des permissions et de s√©curit√©. Contr√¥le l\'acc√®s aux ressources et fonctionnalit√©s.',
            'VO': 'Value Objects - Objets de valeur repr√©sentant les entit√©s m√©tier du syst√®me.',
            'VOsTypesManager': 'Gestionnaire des types d\'objets de valeur. Centralise la d√©finition et la gestion des types de donn√©es.',
            'Translation': 'Syst√®me d\'internationalisation. G√®re les traductions et la localisation de l\'interface utilisateur.',
            'Menu': 'Gestion du syst√®me de navigation et des menus de l\'application.',
            'Request': 'Gestion des requ√™tes HTTP et de la communication client-serveur.',
            'File': 'Syst√®me de gestion des fichiers. Upload, stockage et manipulation des documents.',
            'Mailer': 'Syst√®me d\'envoi d\'emails et de notifications par courrier √©lectronique.',
            'DashboardBuilder': 'Constructeur de tableaux de bord personnalisables et interactifs.',
            'DataImport': 'Syst√®me d\'importation de donn√©es depuis diverses sources (CSV, Excel, etc.).',
            'DataExport': 'Syst√®me d\'exportation de donn√©es vers diff√©rents formats.',
            'Params': 'Gestion centralis√©e des param√®tres de configuration du syst√®me.',
            'Trigger': 'Syst√®me de d√©clencheurs et d\'√©v√©nements pour l\'automatisation.',
            'BGThread': 'Gestion des t√¢ches de fond et du traitement asynchrone.',
            'Cron': 'Planificateur de t√¢ches p√©riodiques et automatis√©es.'
        };

        return descriptions[moduleName] || 'Module syst√®me pour la gestion de fonctionnalit√©s sp√©cifiques.';
    }

    /**
     * Extract key functionality from module content
     */
    extractFunctionality(content, moduleName) {
        const functionalities = {
            'Module': [
                'D√©finition de la structure de base des modules',
                'Gestion du cycle de vie (installation, configuration, activation)',
                'Interface pour les hooks et √©v√©nements du module',
                'Gestion des tables et champs de donn√©es associ√©s'
            ],
            'ModulesManager': [
                'Enregistrement et d√©couverte automatique des modules',
                'Gestion des d√©pendances entre modules',
                'Activation/d√©sactivation dynamique des modules',
                'Cache des instances de modules'
            ],
            'API': [
                'D√©finition des endpoints REST',
                'Gestion de l\'authentification et autorisation',
                'S√©rialisation/d√©s√©rialisation JSON',
                'Gestion des erreurs et codes de retour HTTP'
            ],
            'DAO': [
                'Op√©rations CRUD (Create, Read, Update, Delete)',
                'Gestion des requ√™tes SQL complexes',
                'Cache des donn√©es et optimisations',
                'Transactions et int√©grit√© des donn√©es',
                'Migration et √©volution du sch√©ma de base'
            ],
            'AccessPolicy': [
                'D√©finition des r√¥les et permissions',
                'Contr√¥le d\'acc√®s bas√© sur les r√¥les (RBAC)',
                'Authentification des utilisateurs',
                'Sessions et gestion des tokens'
            ]
        };

        return functionalities[moduleName] || ['Fonctionnalit√©s sp√©cialis√©es du module'];
    }

    /**
     * Extract key methods from module code
     */
    extractKeyMethods(content) {
        const methods = [];
        const methodRegex = /(?:public|private|protected)?\s+(async\s+)?(\w+)\s*\([^)]*\)(?:\s*:\s*[^{]+)?\s*{/g;
        let match;

        while ((match = methodRegex.exec(content)) !== null && methods.length < 10) {
            const methodName = match[2];
            if (methodName && !methodName.startsWith('constructor') && methodName.length > 2) {
                methods.push({
                    name: methodName,
                    isAsync: !!match[1],
                    description: this.generateMethodDescription(methodName)
                });
            }
        }

        return methods;
    }

    /**
     * Generate method description based on name patterns
     */
    generateMethodDescription(methodName) {
        if (methodName.includes('get') || methodName.includes('select')) {
            return 'R√©cup√®re des donn√©es depuis la base ou le cache';
        }
        if (methodName.includes('insert') || methodName.includes('create')) {
            return 'Cr√©e de nouveaux enregistrements';
        }
        if (methodName.includes('update') || methodName.includes('modify')) {
            return 'Met √† jour des donn√©es existantes';
        }
        if (methodName.includes('delete') || methodName.includes('remove')) {
            return 'Supprime des enregistrements';
        }
        if (methodName.includes('hook')) {
            return 'Point d\'extension pour personnalisation';
        }
        if (methodName.includes('configure') || methodName.includes('init')) {
            return 'Configuration et initialisation';
        }
        return 'M√©thode de traitement m√©tier';
    }

    /**
     * Extract module dependencies
     */
    extractDependencies(content) {
        const dependencies = [];
        const importRegex = /import\s+(?:[\w\s{},*]+\s+from\s+)?['"](\.\.?\/.*?)['"]/g;
        let match;

        while ((match = importRegex.exec(content)) !== null && dependencies.length < 10) {
            const importPath = match[1];
            if (importPath.includes('modules/')) {
                const moduleName = importPath.split('/').pop().replace(/^Module/, '').replace(/\.ts$/, '');
                if (moduleName && !dependencies.includes(moduleName)) {
                    dependencies.push(moduleName);
                }
            }
        }

        return dependencies;
    }

    /**
     * Generate usage example for the module
     */
    generateUsageExample(moduleName, content) {
        const examples = {
            'Module': `// Cr√©ation d'un nouveau module
export default class MonModule extends Module {
    constructor() {
        super("mon_module", "MonModule");
    }
    
    public async hook_module_configure(): Promise<boolean> {
        // Configuration du module
        return true;
    }
}`,
            'DAO': `// Exemple d'utilisation du DAO
import ModuleDAO from '../modules/DAO/ModuleDAO';

// R√©cup√©rer des donn√©es
const users = await ModuleDAO.getVOs(UserVO.API_TYPE_ID);

// Cr√©er un nouvel utilisateur
const newUser = new UserVO();
newUser.name = "John Doe";
await ModuleDAO.insertOrUpdateVO(newUser);`,
            'API': `// D√©finition d'une API
APIControllerWrapper.registerServerApiHandler({
    name: 'get_user_data',
    handler: async (req: APIServerParams) => {
        return await UserController.getUserData(req.params.user_id);
    }
});`
        };

        return examples[moduleName] || `// Exemple d'utilisation du module ${moduleName}
const ${moduleName.toLowerCase()}Instance = Module${moduleName}.getInstance();
await ${moduleName.toLowerCase()}Instance.initialize();`;
    }

    /**
     * Generate markdown documentation
     */
    async generateMarkdownDocs(documentation) {
        // Generate main documentation file
        const mainDoc = this.generateMainDocumentation(documentation);
        fs.writeFileSync(path.join(this.outputPath, 'README.md'), mainDoc);

        // Generate individual module documentation
        for (const module of documentation.modules) {
            const moduleDoc = this.generateModuleDocumentation(module);
            fs.writeFileSync(path.join(this.outputPath, `${module.name}.md`), moduleDoc);
        }

        // Generate index
        const indexDoc = this.generateIndexDocumentation(documentation);
        fs.writeFileSync(path.join(this.outputPath, 'INDEX.md'), indexDoc);
    }

    /**
     * Generate main documentation content
     */
    generateMainDocumentation(documentation) {
        const { overview } = documentation;
        
        return `# ${overview.title}

## üìã Description

${overview.description}

## üèóÔ∏è Architecture

${Object.entries(overview.architecture).map(([key, value]) => `- **${key}**: ${value}`).join('\n')}

## ‚≠ê Fonctionnalit√©s cl√©s

${overview.keyFeatures.map(feature => `- ${feature}`).join('\n')}

## üìö Modules cruciaux

Cette documentation couvre les **${documentation.modules.length} modules les plus importants** du syst√®me OSWeDev :

${documentation.modules.map(module => `- [${module.name}](${module.name}.md) - ${module.description}`).join('\n')}

## üöÄ D√©marrage rapide

Pour commencer avec OSWeDev :

1. **Installation des d√©pendances**
   \`\`\`bash
   npm install
   \`\`\`

2. **Construction du projet**
   \`\`\`bash
   npm run build
   \`\`\`

3. **Lancement des tests**
   \`\`\`bash
   npm test
   \`\`\`

## üìñ Documentation d√©taill√©e

Consultez l'[INDEX.md](INDEX.md) pour une vue d'ensemble compl√®te de tous les modules document√©s.

---

*Cette documentation est g√©n√©r√©e automatiquement. Derni√®re mise √† jour : ${new Date().toLocaleString('fr-FR')}*
`;
    }

    /**
     * Generate individual module documentation
     */
    generateModuleDocumentation(module) {
        return `# Module ${module.name}

## üìñ Description

${module.description}

## ‚öôÔ∏è Fonctionnalit√©s principales

${module.functionality.map(func => `- ${func}`).join('\n')}

${module.dependencies.length > 0 ? `## üîó D√©pendances

Ce module d√©pend des modules suivants :
${module.dependencies.map(dep => `- ${dep}`).join('\n')}
` : ''}

${module.keyMethods.length > 0 ? `## üõ†Ô∏è M√©thodes principales

${module.keyMethods.map(method => `### ${method.name}${method.isAsync ? ' (async)' : ''}
${method.description}
`).join('\n')}
` : ''}

## üíª Exemple d'utilisation

\`\`\`typescript
${module.usageExample}
\`\`\`

## üìç Localisation

**Chemin :** \`${module.path.replace(this.projectRoot, '')}\`

---

*Derni√®re mise √† jour : ${new Date().toLocaleString('fr-FR')}*
`;
    }

    /**
     * Generate index documentation
     */
    generateIndexDocumentation(documentation) {
        return `# Index de la documentation OSWeDev

## üìö Modules document√©s

${documentation.modules.map((module, index) => `${index + 1}. **[${module.name}](${module.name}.md)**
   ${module.description}
   
   üîß Fonctionnalit√©s : ${module.functionality.slice(0, 2).join(', ')}${module.functionality.length > 2 ? '...' : ''}
   
   ${module.dependencies.length > 0 ? `üîó D√©pend de : ${module.dependencies.slice(0, 3).join(', ')}${module.dependencies.length > 3 ? '...' : ''}` : ''}
`).join('\n')}

## üéØ Modules par cat√©gorie

### üèóÔ∏è Architecture de base
- [Module](Module.md) - Structure de base
- [ModulesManager](ModulesManager.md) - Gestionnaire de modules
- [VO](VO.md) - Objets de valeur
- [VOsTypesManager](VOsTypesManager.md) - Gestion des types

### üåê API et donn√©es
- [API](API.md) - Interface REST
- [DAO](DAO.md) - Acc√®s aux donn√©es
- [Request](Request.md) - Gestion des requ√™tes

### üîê S√©curit√©
- [AccessPolicy](AccessPolicy.md) - Permissions et s√©curit√©

### üé® Interface utilisateur
- [Menu](Menu.md) - Navigation
- [Translation](Translation.md) - Internationalisation
- [DashboardBuilder](DashboardBuilder.md) - Tableaux de bord

### üìÅ Gestion des donn√©es
- [File](File.md) - Gestion de fichiers
- [DataImport](DataImport.md) - Import de donn√©es
- [DataExport](DataExport.md) - Export de donn√©es

### üîß Services
- [Mailer](Mailer.md) - Envoi d'emails
- [Params](Params.md) - Configuration
- [Trigger](Trigger.md) - √âv√©nements
- [BGThread](BGThread.md) - T√¢ches de fond
- [Cron](Cron.md) - Planification

---

*Documentation g√©n√©r√©e automatiquement le ${new Date().toLocaleString('fr-FR')}*
`;
    }
}

// Execute if run directly
if (require.main === module) {
    const generator = new OSWeDevDocGenerator();
    generator.generate();
}

module.exports = OSWeDevDocGenerator;