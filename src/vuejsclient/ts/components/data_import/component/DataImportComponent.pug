include ../../../../views/mixins/loading.pug

.data-import
    +loading()
        .row
            .col-md-12
                h2.imports_page_title {{ title }}
        .row(v-if='import_overview_component')
            .col-md-12
                component(:is="import_overview_component")

        .row(v-if='import_param_component')
            .col-md-12
                component(:is="import_param_component")

        .row.justify-content-between
            .col-md-2.justify-content-start
                button.btn.btn-sm.btn-primary(@click="previous_segments")
                    i.fa.fa-arrow-left(aria-hidden="true")
            .col-md-2.justify-content-end
                button.btn.btn-sm.btn-primary(@click="next_segments")
                    i.fa.fa-arrow-left(aria-hidden="true")
        .row.justify-content-between
            template(v-for='segment in segments')
                .col-md-1
                    .segment_date_index(v-if='segment_type == "year"') {{ formatDate_Fullyear(segment.dateIndex) }}
                    .segment_date_index(v-if='segment_type == "month"') {{ formatDate_FullyearMonth(segment.dateIndex) }}
                    .segment_date_index(v-if='segment_type == "day"') {{ formatDate_FullyearMonthDay(segment.dateIndex) }}
        .row.justify-content-between
            template(v-for='segment in segments')
                .col-md-1.bg-secondary(v-if='segment_states[segment.dateIndex] == segment_state_unavail')
                .col-md-1.bg-success(v-else, :class='{bg-success: segment_states[segment.dateIndex] == segment_state_ok, bg-danger: segment_states[segment.dateIndex] == segment_state_ko, bg-warning: segment_states[segment.dateIndex] == segment_state_warn}')
                    vueDropzone(:ref="'myVueDropzone'+selected_segment.dateIndex" :id="'dropzone'+selected_segment.dateIndex" :options="dropzoneOptions(api_type_id)")

        #import_modal.modal.fade
            .modal-dialog
                .modal-content
                    .modal-header
                        h4.modal-title {{ selected_segment.dateIndex }}
                        router-link.btn.close(:to="route_path") &times;
                    .modal-body
                        .row 
                            fileinput(:readonly="true" filevoid='filevo')
                        .row(v-for='api_type_id in api_type_ids')
                            jumbotron
                                p.lead.import_title {{ selected_segment_labels[api_type_id] }}
                                hr
                                p.justify-content-between.align-items-left
                                    p {{ label('import.format.modal.title') }}
                                    span.badge.badge-success.badge-spill(v-if='format_validated[api_type_id]')
                                        i.fa.fa-check(aria-hidden="true")
                                    span.badge.badge-secondary.badge-spill(v-if='!has_formatted_datas[api_type_id]')
                                        i.fa.fa-arrow-up(aria-hidden="true")
                                    span.badge.badge-danger.badge-spill(v-if='format_invalidated[api_type_id]')
                                        i.fa.fa-times(aria-hidden="true")
                                ul.list-group(v-if="has_formatted_datas[api_type_id]")
                                    i.fa.fa-spinner.fa-spin(v-if="!nb_validated_format_elements")
                                    li.list-group-item.d-flex.justify-content-between.align-items-center(v-if="nb_validated_format_elements")
                                        {{ label('import.format.modal.nb_validated_format_elements') }}
                                        span.badge.badge-success.badge-spill {{ nb_validated_format_elements[api_type_id] }}
                                    i.fa.fa-spinner.fa-spin(v-if="!nb_unvalidated_format_elements")
                                    li.list-group-item.d-flex.justify-content-between.align-items-center(v-if="nb_unvalidated_format_elements")
                                        {{ label('import.format.modal.nb_unvalidated_format_elements') }}
                                        span.badge.badge-danger.badge-spill {{ nb_unvalidated_format_elements[api_type_id] }}
                                template(v-if='needs_format_validation[api_type_id]')
                                    button.btn.btn-primary(@click="continue_importation(api_type_id)")
                                        i.fa.fa-check(aria-hidden="true") {{ label('import.format.modal.continue') }}
                                    button.btn.btn-secondary(@click="cancel_importation(api_type_id)")
                                        i.fa.fa-check(aria-hidden="true") {{ label('import.format.modal.cancel') }}

                                hr
                                p.justify-content-between.align-items-left
                                    p {{ label('import.import.modal.title') }}
                                    span.badge.badge-success.badge-spill(v-if='imported[api_type_id]')
                                        i.fa.fa-check(aria-hidden="true")
                                    span.badge.badge-secondary.badge-spill(v-if='!(format_validated[api_type_id] || format_invalidated[api_type_id])')
                                        i.fa.fa-arrow-up(aria-hidden="true")
                                    span.badge.badge-danger.badge-spill(v-if='import_failed[api_type_id]')
                                        i.fa.fa-times(aria-hidden="true")

                                hr
                                p.justify-content-between.align-items-left
                                    p {{ label('import.posttreat.modal.title') }}
                                    span.badge.badge-success.badge-spill(v-if='posttreated[api_type_id]')
                                        i.fa.fa-check(aria-hidden="true")
                                    span.badge.badge-secondary.badge-spill(v-if='!(imported[api_type_id] || import_failed[api_type_id])')
                                        i.fa.fa-arrow-up(aria-hidden="true")
                                    span.badge.badge-danger.badge-spill(v-if='posttreat_failed[api_type_id]')
                                        i.fa.fa-times(aria-hidden="true")
