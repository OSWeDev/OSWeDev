include ../../../../views/mixins/loading.pug

mixin simple_input_types(vo, datatable, field_type)
    .form-group(:class=field_type)
        label {{ t(field.translatable_title) }}
            template(v-if="field.is_required")
                i.fa.fa-asterisk.mandatory
        template(v-if=field_type+" == 'password'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-if=field_type+" == 'text'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'boolean'")
            template(v-if="field.is_required")
                input.form-control(type="checkbox" v-model=vo+"[field.datatable_field_uid]" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
            template(v-else)
                .form-check
                    input.form-check-input(type="radio" v-model=vo+"[field.datatable_field_uid]" :value="null" :disabled="field.is_readonly" :id="'materialChecked_' + field.datatable_field_uid + '___N_A'" @input="validateInput($event.target, field, "+vo+")")
                    label.form-check-label(:for="'materialChecked_' + field.datatable_field_uid + '___N_A'") {{ label('crud.field.boolean.n_a') }}
                .form-check
                    input.form-check-input(type="radio" v-model=vo+"[field.datatable_field_uid]" :value="true" :disabled="field.is_readonly" :id="'materialChecked_' + field.datatable_field_uid + '___TRUE'" @input="validateInput($event.target, field, "+vo+")")
                    label.form-check-label(:for="'materialChecked_' + field.datatable_field_uid + '___TRUE'") {{ label('crud.field.boolean.true') }}
                .form-check
                    input.form-check-input(type="radio" v-model=vo+"[field.datatable_field_uid]" :value="false" :disabled="field.is_readonly" :id="'materialChecked_' + field.datatable_field_uid + '___FALSE'" @input="validateInput($event.target, field, "+vo+")")
                    label.form-check-label(:for="'materialChecked_' + field.datatable_field_uid + '___FALSE'") {{ label('crud.field.boolean.false') }}
        template(v-else-if=field_type+" == 'number'")
            input.form-control(type="number" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'amount'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'float'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'pct'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'HourAndMinuteWithoutLimit'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'HourAndMinute'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if="("+field_type+" == 'date') || ("+field_type+" == 'day')")
            input.form-control(type="date" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'month'")
            input.form-control(type="month" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'daterange'")
            input.form-control(type="date" v-model=vo+"[field.datatable_field_uid + '_start']" :disabled="field.is_readonly" @change="updateDateRange("+vo+", field)" @input="validateInput($event.target, field, "+vo+")")
            input.form-control(type="date" v-model=vo+"[field.datatable_field_uid + '_end']" :disabled="field.is_readonly" @change="updateDateRange("+vo+", field)" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'tsrange'")
            input.form-control(type="text" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'timestamp'")
            input.form-control(type="number" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'html'")
            quill-editor(v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if="(" +field_type+" == 'file')&&("+vo+"._type == 'file')")
            fileinput(:filevo=vo @uploaded="uploadedFile("+vo+", field, ...arguments)")
        template(v-else-if="(" +field_type+" == 'image')&&("+vo+"._type == 'image')")
            imageinput(:filevo=vo @uploaded="uploadedFile("+vo+", field, ...arguments)")
        template(v-else-if=field_type+" == 'timewithouttimezone'")
            input.form-control(type="time" v-model=vo+"[field.datatable_field_uid]" :required="field.is_required" :disabled="field.is_readonly" @input="validateInput($event.target, field, "+vo+")")
        template(v-else-if=field_type+" == 'enum'")
            multiselect(
                v-model=vo+"[field.datatable_field_uid]"
                :custom-label="field.enumIdToHumanReadable",
                :options="select_options[field.datatable_field_uid]",
                :loading="isLoadingOptions[field.datatable_field_uid]",
                :id="field.datatable_field_uid",
                :searchable="true",
                :internal-search="false",
                :allow-empty="!field.is_required",
                :disabled="field.is_readonly",
                :preselectFirst="field.is_required",
                @search-change="asyncLoadEnumOptions",
                @input="onChangeField("+vo+", "+datatable+", field)")
        template(v-else-if=field_type+" == 'number[]'")
            multi-input(:field_value=vo+"[field.datatable_field_uid]", :vo="'" + vo + "'", :field="field", :required="field.is_required", :disabled="field.is_readonly", type_input="number", @input="validateMultiInput")
        template(v-else-if=field_type+" == 'text[]'")
            multi-input(:field_value=vo+"[field.datatable_field_uid]", :vo="'" + vo + "'", :field="field", :required="field.is_required", :disabled="field.is_readonly", type_input="text", @input="validateMultiInput")


mixin manytoone_input(vo, datatable)
    .form-group
        label {{ t(field.translatable_title) }}
            template(v-if="field.is_required")
                i.fa.fa-asterisk.mandatory
        .btn-group.link_ref.hidden-print
            template(v-if=vo+"[field.datatable_field_uid]")
                a.btn.btn-sm.btn-primary(:href="'/admin#' + getCRUDUpdateLink(field.targetModuleTable.vo_type, "+vo+"[field.datatable_field_uid])" target='_blank')
                    i.fa.fa-pencil
            a.btn.btn-sm.btn-success(:href="'/admin#' + getCRUDCreateLink(field.targetModuleTable.vo_type)" target='_blank')
                i.fa.fa-plus-circle
        multiselect(
            v-model=vo+"[field.datatable_field_uid]",
            :custom-label="field.voIdToHumanReadable",
            :options="select_options[field.datatable_field_uid]",
            :placeholder="t(field.translatable_place_holder)",
            :loading="isLoadingOptions[field.datatable_field_uid]",
            :id="field.datatable_field_uid",
            :searchable="true",
            :internal-search="false",
            :allow-empty="!field.is_required",
            :preselectFirst="field.is_required",
            @search-change="asyncLoadOptions",
            @input="onChangeField("+vo+", "+datatable+", field)")


mixin onetomany_input(vo, datatable)
    .form-group
        label {{ t(field.translatable_title) }}
        .btn-group.link_ref
            router-link.btn.btn-sm.btn-success(:to="getCRUDCreateLink(field.targetModuleTable.vo_type)" target='_blank')
                i.fa.fa-plus-circle
        multiselect(
            v-model=vo+"[field.datatable_field_uid]",
            
            
            :custom-label="field.voIdToHumanReadable",
            
            
            :options="select_options[field.datatable_field_uid]",
            :placeholder="t(field.translatable_place_holder)",
            :loading="isLoadingOptions[field.datatable_field_uid]",
            :id="field.datatable_field_uid",
            :searchable="true",
            :internal-search="false",
            :allow-empty="true",
            :preselectFirst="false",
            @search-change="asyncLoadOptions",
            @input="onChangeField("+vo+", "+datatable+", field)",
            :multiple="true")


.crud-wrapper
    +loading()
        .crud-table-wrapper
            .table-title
                h5 {{ CRUDTitle }}
                .btn-group.d-print-none
                    button.btn.btn-sm.btn-secondary.m-1(@click='reload_datas()')
                        i.fa.fa-refresh.fa-lg.btn_icon(aria-hidden="true")
                        | {{ label('crud.actions.refresh') }}
                    button.btn.btn-sm.btn-outline-dark.m-1(v-if="isExportableToXLSX", href="#", @click="export_to_xlsx()")
                        i.fa.fa-download.fa-lg.btn_icon
                        | {{ label('crud.actions.export') }}
                    router-link.btn.btn-sm.btn-success.m-1(:to="getCRUDCreateLink(api_type_id)", v-if='(!crud.forced_readonly) && (!isModuleParamTable)')
                        i.fa.fa-plus-circle.fa-lg.btn_icon
                        | {{ label('crud.actions.create') }}
                    //- a.btn.btn-danger(role="button" href="#deleteData" data-toggle="modal" v-if="select_options && (select_options.length > 1)")
                    //-     i.fa.fa-trash
                    //-     span {{ label('crud.actions.delete') }}
            datatable.crud_datatable(
                :key="'datatable_' + crud.readDatatable.API_TYPE_ID"
                :datatable="crud.readDatatable",
                :update_button="!crud.forced_readonly",
                :delete_button="!crud.forced_readonly",
                :multiselectable="false",
                :api_types_involved="api_types_involved",
                :load_datas="false")

        <!-- Create Modal HTML -->
        #createData.modal.fade.in(v-if='!isModuleParamTable', tabindex='-1', role='dialog')
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    form(v-on:submit.prevent="createVO")
                        .modal-header
                            h4.modal-title {{ label('crud.create.modal.title') }}
                            router-link.btn.close(:to="getCRUDLink(api_type_id)") &times;
                        .modal-body
                            .alert.alert-warning(v-if="is_only_readable") {{ label('crud.create.modal.readonly') }}
                            template(v-if="newVO")
                                template(v-for="field in crud.createDatatable.fields")
                                    template(v-if="((field.type == 'INPUT') || (field.datatable_field_uid == field.module_table_field_id)) && (field.isVisibleUpdateOrCreate(newVO))")
                                        template(v-if="field.type == 'Simple'")
                                            +simple_input_types('newVO', 'crud.createDatatable', 'field.moduleTableField.field_type')

                                        template(v-else-if="field.type == 'INPUT'")
                                            +simple_input_types('newVO', 'crud.createDatatable', 'field.field_type')

                                        template(v-else-if="field.type == 'ManyToOne'")
                                            +manytoone_input('newVO', 'crud.createDatatable')

                                        template(v-else-if="(field.type == 'OneToMany') || (field.type == 'ManyToMany')")
                                            +onetomany_input('newVO', 'crud.createDatatable')

                            template(v-else)
                                p {{ label('crud.create.modal.content.newvo_failure') }}
                        .modal-footer
                            router-link.btn.btn-default(:to="getCRUDLink(api_type_id)" v-if="!creating_vo") {{ label('crud.create.modal.cancel') }}
                            template(v-if="newVO && !creating_vo && !is_only_readable")
                                input.btn.btn-primary(type="submit" :value="label('crud.create.modal.add')")
        <!-- Edit Modal HTML -->
        #updateData.modal.fade.in(tabindex='-1', role='dialog')
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    form(v-on:submit.prevent="updateVO")
                        .modal-header
                            h4.modal-title {{ label('crud.update.modal.title') }}
                            router-link.btn.close(:to="getCRUDLink(api_type_id)") &times;
                        .modal-body
                            .alert.alert-danger(v-if="is_only_readable") {{ label('crud.update.modal.readonly') }}
                            template(v-if="selectedVO && editableVO")
                                template(v-for="field in crud.updateDatatable.fields")
                                    template(v-if="((field.type == 'INPUT') || (field.datatable_field_uid == field.module_table_field_id)) && (field.isVisibleUpdateOrCreate(editableVO))")
                                        template(v-if="field.type == 'Simple'")
                                            +simple_input_types('editableVO', 'crud.updateDatatable', 'field.moduleTableField.field_type')

                                        template(v-else-if="field.type == 'INPUT'")
                                            +simple_input_types('editableVO', 'crud.updateDatatable', 'field.field_type')

                                        template(v-else-if="field.type == 'ManyToOne'")
                                            +manytoone_input('editableVO', 'crud.updateDatatable')

                                        template(v-else-if="(field.type == 'OneToMany') || (field.type == 'ManyToMany')")
                                            +onetomany_input('editableVO', 'crud.updateDatatable')
                                            
                            template(v-else)
                                p {{ label('crud.update.modal.content.selection_failure') }}
                        .modal-footer
                            router-link.btn.btn-default(:to="getCRUDLink(api_type_id)" v-if="!updating_vo") {{ label('crud.update.modal.cancel') }}
                            template(v-if="selectedVO && editableVO && !updating_vo && !is_only_readable")
                                input.btn.btn-primary(type="submit" :value="label('crud.update.modal.save')")

        #deleteData.modal.fade.in(v-if='!isModuleParamTable', tabindex='-1', role='dialog')
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    form(v-on:submit.prevent="deleteVO")
                        .modal-header
                            h4.modal-title {{ label('crud.delete.modal.title') }}
                            router-link.btn.close(:to="getCRUDLink(api_type_id)") &times;
                        .modal-body
                            .alert.alert-danger(v-if="is_only_readable") {{ label('crud.delete.modal.readonly') }}
                            template(v-if="selectedVO")
                                p {{ label('crud.delete.modal.content') }}
                                    .text-warning
                                        small {{ label('crud.delete.modal.content.warning') }}
                            template(v-else)
                                p {{ label('crud.delete.modal.content.selection_failure') }}
                        .modal-footer
                            router-link.btn.btn-default(:to="getCRUDLink(api_type_id)" v-if="!deleting_vo") {{ label('crud.delete.modal.cancel') }}
                            template(v-if="selectedVO && !deleting_vo && !is_only_readable")
                                input.btn.btn-danger(type="submit" :value="label('crud.delete.modal.delete')")