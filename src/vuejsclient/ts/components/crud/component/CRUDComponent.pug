include ../../../../views/mixins/loading.pug

.crud-wrapper
    +loading()
        .crud-table-wrapper(:class="classname")
            .table-title
                h5(v-if='!embed') {{ CRUDTitle }}
                .btn-group.d-print-none
                    button.btn.btn-sm.btn-secondary.m-1(v-if='!embed', @click='reload_datas()')
                        i.fa.fa-refresh.fa-lg.btn_icon(aria-hidden="true")
                        | {{ label('crud.actions.refresh') }}
                    button.btn.btn-sm.btn-outline-dark.m-1(v-if="isExportableToXLSX && !embed", href="#", @click="export_to_xlsx()")
                        i.fa.fa-download.fa-lg.btn_icon
                        | {{ label('crud.actions.export') }}
                    router-link.btn.btn-sm.btn-success.m-1(:to="getCRUDCreateLink(api_type_id)", v-if='(!embed) && (!crud.forced_readonly) && (!isModuleParamTable)')
                        i.fa.fa-plus-circle.fa-lg.btn_icon
                        | {{ label('crud.actions.create') }}

                    //- template(v-if="(!crud.forced_readonly) && (!isModuleParamTable)")
                    //-     template(v-if="embed")
                    //-         button.btn.btn-sm.btn-success.m-1(@click="showCreateModal()")
                    //-             i.fa.fa-plus-circle.fa-lg.btn_icon
                    //-             | {{ label('crud.actions.create') }}
                    //-     template(v-else)
                    //-         router-link.btn.btn-sm.btn-success.m-1(:to="getCRUDCreateLink(api_type_id)")
                    //-             i.fa.fa-plus-circle.fa-lg.btn_icon
                    //-             | {{ label('crud.actions.create') }}
                    //- a.btn.btn-danger(role="button" href="#deleteData" data-toggle="modal" v-if="select_options && (select_options.length > 1)")
                    //-     i.fa.fa-trash
                    //-     span {{ label('crud.actions.delete') }}
            //- span {{ modal_show_create }} {{ modal_show_update }} {{ modal_show_delete }}
            Datatable.crud_datatable(
                :key="'datatable_' + crud.readDatatable.API_TYPE_ID"
                :datatable="crud.readDatatable",
                :update_button="!crud.forced_readonly || crud.forced_updateonly",
                :vocus_button="(!crud.forced_updateonly) && can_access_vocus",
                :delete_button="!crud.forced_readonly && !crud.forced_updateonly",
                :multiselectable="false",
                :api_types_involved="api_types_involved",
                :load_datas="false",
                @show-crud-modal="showCrudModal",
                :embed="embed",
                :embed_filter="embed_filter",
                :perpage="perpage",
                :sort_id_descending="sort_id_descending",
                :display_filters="display_filters")

        <!-- Create Modal HTML -->
        .modal.fade.in(:id="(embed) ? 'createData_'+crud.readDatatable.API_TYPE_ID : 'createData' ", v-if='!isModuleParamTable', tabindex='-1', role='dialog')
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    form(v-on:submit.prevent="createVO")
                        .modal-header
                            h4.modal-title.d-ib {{ label('crud.create.modal.title') }}
                            template(v-if="embed")
                                a.btn.close(data-dismiss="modal") &times;
                            template(v-else)
                                router-link.btn.close(:to="callback_route") &times;
                        .modal-body
                            .alert.alert-warning(v-if="is_only_readable") {{ label('crud.create.modal.readonly') }}
                            template(v-if="newVO")
                                template(v-if="has_createDatatable", v-for="field in crud.createDatatable.fields")
                                    Crudcomponentfield(
                                        v-show="!field.hidden",
                                        :key="newVO._type + '_createDatatable_' + field.datatable_field_uid + '_' + crud_createDatatable_key",
                                        :field="field",
                                        :vo="newVO",
                                        :datatable="crud.createDatatable",
                                        :auto_update_field_value="true",
                                        @uploadedfile="uploadedFile",
                                        @onchangevo="onChangeVO",
                                        :show_insert_or_update_target='show_insert_or_update_target'
                                    )

                            template(v-else)
                                p {{ label('crud.create.modal.content.newvo_failure') }}
                        .modal-footer
                            template(v-if="embed")
                                a.btn.btn-default(v-if="!creating_vo", data-dismiss="modal") {{ label('crud.create.modal.cancel') }}
                            template(v-else)
                                router-link.btn.btn-default(:to="callback_route" v-if="!creating_vo") {{ label('crud.create.modal.cancel') }}
                            template(v-if="newVO && !creating_vo && !is_only_readable")
                                input.btn.btn-primary(type="submit" :value="label('crud.create.modal.add')")
        <!-- Edit Modal HTML -->
        .modal.fade.in(:id="(embed) ? 'updateData_'+crud.readDatatable.API_TYPE_ID : 'updateData' ", tabindex='-1', role='dialog')
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    form(v-on:submit.prevent="updateVO")
                        .modal-header
                            h4.modal-title.d-ib {{ label('crud.update.modal.title') }}
                            template(v-if="embed")
                                a.btn.close(data-dismiss="modal") &times;
                            template(v-else)
                                router-link.btn.close(:to="callback_route") &times;
                        .modal-body
                            .alert.alert-danger(v-if="is_only_readable") {{ label('crud.update.modal.readonly') }}
                            template(v-if="selectedVO && editableVO")
                                template(v-for="field in crud.updateDatatable.fields")
                                    Crudcomponentfield(
                                        v-show="!field.hidden",
                                        :key="newVO._type + '_updateDatatable_' + field.datatable_field_uid + '_' + crud_updateDatatable_key",
                                        :field="field",
                                        :vo="editableVO",
                                        :datatable="crud.updateDatatable",
                                        :auto_update_field_value="true",
                                        @uploadedfile="uploadedFile",
                                        @onchangevo="onChangeVO",
                                        :show_insert_or_update_target='show_insert_or_update_target'
                                    )

                            template(v-else)
                                p {{ label('crud.update.modal.content.selection_failure') }}
                        .modal-footer
                            template(v-if="embed")
                                a.btn.btn-default(v-if="!updating_vo", data-dismiss="modal") {{ label('crud.update.modal.cancel') }}
                            template(v-else)
                                router-link.btn.btn-default(:to="callback_route" v-if="!updating_vo") {{ label('crud.update.modal.cancel') }}
                            template(v-if="selectedVO && editableVO && !updating_vo && !is_only_readable")
                                input.btn.btn-primary(type="submit" :value="label('crud.update.modal.save')")

        .modal.fade.in(:id="(embed) ? 'deleteData_'+crud.readDatatable.API_TYPE_ID : 'deleteData' ", v-if='!isModuleParamTable', tabindex='-1', role='dialog')
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    form(v-on:submit.prevent="deleteVO")
                        .modal-header
                            h4.modal-title.d-ib {{ label('crud.delete.modal.title') }}
                            template(v-if="embed")
                                a.btn.close(data-dismiss="modal") &times;
                            template(v-else)
                                router-link.btn.close(:to="callback_route") &times;
                        .modal-body
                            .alert.alert-danger(v-if="is_only_readable") {{ label('crud.delete.modal.readonly') }}
                            template(v-if="selectedVO")
                                p {{ label('crud.delete.modal.content') }}
                                    .text-warning
                                        small {{ label('crud.delete.modal.content.warning') }}
                            template(v-else)
                                p {{ label('crud.delete.modal.content.selection_failure') }}
                        .modal-footer
                            template(v-if="embed")
                                a.btn.btn-default(v-if="!deleting_vo", data-dismiss="modal") {{ label('crud.delete.modal.cancel') }}
                            template(v-else)
                                router-link.btn.btn-default(:to="callback_route" v-if="!deleting_vo") {{ label('crud.delete.modal.cancel') }}
                            template(v-if="selectedVO && !deleting_vo && !is_only_readable")
                                input.btn.btn-danger(type="submit" :value="label('crud.delete.modal.delete')")