.form-group(:class="{[field_type]:true, auto_validate_inline_input:auto_validate_inline_input, inline_input_mode:inline_input_mode, has_alert:(get_alerts && get_alerts[alert_path] && (get_alerts[alert_path].length > 0))}" @click='try_prepare_inline_input')

    template(v-if='inline_input_mode && (!is_disabled) && (!inline_input_mode_input_only) && (!auto_validate_inline_input)')
        template(v-if='!inline_input_is_editing')
            template(v-if='inline_input_show_clear && !field.is_required')
                i.inline_input_show_clear.fa.fa-duotone.fa-trash.btn-danger(@click='inline_clear_value' :class="{busy: inline_input_is_busy}")
            template(v-else)
                i.inline_input_hide_clear.fa.fa-circle-arrow-right.btn-info(:class="{busy: inline_input_is_busy}")
        template(v-else)
            i.inline_input_cancel_input.fa.fa-undo.btn-warning(@click='cancel_input' :class="{busy: inline_input_is_busy}")

    Alertcomponent.datatable_field_alert.simple_datatable_field_alert(:path='alert_path')

    template(v-if='((!inline_input_mode) || (!inline_input_hide_label)) && (!inverse_label)')
        include ./CRUDComponentFieldLabel

    template(v-if="field_type == 'password'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="(field_type == 'text') || (field_type == 'email')")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" :type="field_type" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="(field_type == 'color')")
        color-picker.ml-2(v-model="field_value", @input="validateInput($event.target, true)" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))")
    template(v-else-if="field_type == 'textarea'")
        textarea(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="field_type == 'translatable_text'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="field_type == 'boolean'")
        template(v-if="inline_input_mode && (!inline_input_is_editing) && (!field.is_required) && (!force_toggle_button || !field.force_toggle_button)")
            .bool_field_inline_readonly_value
                template(v-if="field_value == true")
                    | {{ label('crud.field.boolean.true') }}
                template(v-else-if='field_value == false')
                    | {{ label('crud.field.boolean.false') }}
                template(v-else)
                    | {{ label('crud.field.boolean.n_a') }}
        template(v-else)
            template(v-if="field.is_required ||( force_toggle_button || field.force_toggle_button)")
                toggle-button.ml-2(
                    :class="{'valign-middle': show_pencil_btn}"
                    @keypress="onkeypress($event)"
                    @keydown.esc='onkeypress_escape'
                    ref='input_elt'
                    @change="validateToggle"
                    :value="field_value"
                    :sync="true"
                    :width="60"
                    :labels="{checked: label('crud.field.boolean.true'), unchecked: label('crud.field.boolean.false')}"
                    :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))"
                    :id="input_elt_id")
            template(v-else)
                .form-checks
                    .form-check
                        input.form-check-input(type="radio" v-model="field_value" :value="null" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" :id="'materialChecked_' + input_elt_id + '___N_A_' + random_number" @change="validateInput($event.target)" @blur="$emit('blur', $event.target.value)", :autocomplete="autocomplete_input ? 'on' : 'off'")
                        label.form-check-label(:for="'materialChecked_' + input_elt_id + '___N_A_' + random_number") {{ label('crud.field.boolean.n_a') }}
                    .form-check
                        input.form-check-input(type="radio" v-model="field_value" :value="true" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" :id="'materialChecked_' + input_elt_id + '___TRUE_' + random_number" @change="validateInput($event.target)" @blur="$emit('blur', $event.target.value)", :autocomplete="autocomplete_input ? 'on' : 'off'")
                        label.form-check-label(:for="'materialChecked_' + input_elt_id + '___TRUE_' + random_number") {{ label('crud.field.boolean.true') }}
                    .form-check
                        input.form-check-input(type="radio" v-model="field_value" :value="false" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" :id="'materialChecked_' + input_elt_id + '___FALSE_' + random_number" @change="validateInput($event.target)" @blur="$emit('blur', $event.target.value)", :autocomplete="autocomplete_input ? 'on' : 'off'")
                        label.form-check-label(:for="'materialChecked_' + input_elt_id + '___FALSE_' + random_number") {{ label('crud.field.boolean.false') }}
    template(v-else-if="field_type == 'number'")
        input(inputmode="numeric" :placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="number" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="field_type == 'amount'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" v-on:keyup.enter="inline_input_submit" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="(field_type == 'float') || (field_type == 'decimal')")
        input(inputmode="decimal" :placeholder="show_placeholder ? t(placeholder_string) : null" @focus="on_focus_select" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="number" step="0.01" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="(field_type == 'decimal_full_precision')")
        input(inputmode="decimal" :placeholder="show_placeholder ? t(placeholder_string) : null" @focus="on_focus_select" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="number" step="any" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="field_type == 'pct'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="field_type == 'HourAndMinuteWithoutLimit'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="field_type == 'HourAndMinute'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="(field_type == 'date') || (field_type == 'day')")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="date" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target)" @change="validateEndOfInput($event.target)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="field_type == 'month'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="month" v-model="field_value" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target)" @change="validateEndOfInput($event.target)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="field_type == 'daterange'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="date" v-model="field_value_range[field.datatable_field_uid + '_start']" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="updateDateRange($event.target)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="date" v-model="field_value_range[field.datatable_field_uid + '_end']" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="updateDateRange($event.target)" @blur="on_blur_emit" @focus="on_focus" :id="input_elt_id", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="field_type == 'daterange[]'")
    // FIXME TODO ASAP
    // FIXME TODO ASAP field_type == 'tstzrange[]' autres segmentations
    template(v-else-if="is_segmented_day_tsrange_array")
        Tsrangesinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))"  @input_with_infos="validateSimpleInput" :id="input_elt_id")

    template(v-else-if="field_type == 'numrange[]'")
        // FIXME TODO ASAP
    template(v-else-if="field_type == 'numrange'")
        Numrangeinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))"  @input_with_infos="validateSimpleInput" :id="input_elt_id")
        // FIXME TODO ASAP
    template(v-else-if="field_type == 'isoweekdays'")
        Isoweekdaysinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))"  @input_with_infos="validateSimpleInput" :id="input_elt_id")

    template(v-else-if="field_type == 'hourrange[]'")
        Multiinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            :custom_field_component="hourrange_input_component"
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" type_input="custom" @input_with_infos="validateMultiInput" :id="input_elt_id")

    template(v-else-if="field_type == 'hourrange'")
        Hourrangeinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input_with_infos="validateSimpleInput" :id="input_elt_id")

    template(v-else-if="field_type == 'hour'")
        // FIXME TODO ASAP

    template(v-else-if="field_type == 'tstz'")
        Tstzinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input_with_infos="validateSimpleInput" :id="input_elt_id")
    template(v-else-if="field_type == 'tstz[]'")
        Multiinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            :custom_field_component="tstz_input_component"
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" type_input="custom" @input_with_infos="validateMultiInput" :id="input_elt_id")

    template(v-else-if="field_type == 'tsrange'")
        Tsrangeinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input_with_infos="validateSimpleInput" :id="input_elt_id" :option="option_ts_range")
    template(v-else-if="field_type == 'timestamp'")
        Timestampinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value" :vo="vo" :field="field" :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input_with_infos="validateSimpleInput" :id="input_elt_id")
    template(v-else-if="field_type == 'html'")
        template(v-if="inline_input_mode && !inline_input_is_editing")
            .html_field_inline_readonly_value.valign-middle(v-html='field_value')
        template(v-else)
            Vuequilleditor.valign-middle(v-model="field_value" ref="input_elt" :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event, true)"  @blur="validateEndOfInput($event, true)" :id="input_elt_id")
    template(v-else-if="(field_type == 'file')&&(vo._type == 'file')")
        Filecomponent(ref="input_elt" :filevo="vo" @uploaded="uploadedFile(...arguments)" :id="input_elt_id" :disabled="is_readonly")
    template(v-else-if="(field_type == 'file')")
        template(v-if="field_value")
            .download_link
                a.btn.btn-primary(:href="field_value" target="_blank") {{ label('crud.field.file.download') }}
    template(v-else-if="(field_type == 'image')")
        Imagecomponent(ref="input_elt" :imagevo="vo" :field="field" @uploaded="uploadedFile(...arguments)", :id="input_elt_id" :disabled="is_readonly")
    template(v-else-if="field_type == 'timewithouttimezone'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="time" v-model="field_value" :id="input_elt_id", :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target), true", :autocomplete="autocomplete_input ? 'on' : 'off'")
    template(v-else-if="field_type == 'unix_timestamp'")
        input(:placeholder="show_placeholder ? t(placeholder_string) : null" @keypress="onkeypress($event)" @keydown.esc='onkeypress_escape' ref='input_elt' :class="{'form-control': !inline_input_mode, 'valign-middle': show_pencil_btn}" type="text" v-model="field_value" :id="input_elt_id", :required="field.is_required" :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))" @input="validateInput($event.target, true)" @change="validateEndOfInput($event.target, true)" :maxlength="maxlength", :autocomplete="autocomplete_input ? 'on' : 'off'")
        template(v-if="maxlength")
            .maxlength.italic.f-r {{ field_value_length }} / {{ maxlength }}
    template(v-else-if="field_type == 'enum'")
        multiselect(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            v-model="field_value"
            :options="select_options",
            autocomplete="off"
            :loading="isLoadingOptions",
            :id="input_elt_id",
            :searchable="searchable",
            :internal-search="false",
            :allow-empty="!field.is_required",
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))",
            :preselect-first="field.is_required",
            @search-change="asyncLoadEnumOptions",
            @input="onChangeField"

            :placeholder="t(placeholder_string)",

            :select-label='label("multiselect.selectLabel")'
            :select-group-label='label("multiselect.selectGroupLabel")'
            :selected-label='label("multiselect.selectedLabel")'
            :deselect-label='label("multiselect.deselectLabel")'
            :deselect-group-label='label("multiselect.deselectGroupLabel")'
        )
            template(slot="singleLabel" slot-scope="props")
                //- img.option__image(v-if="field.enumIdToHumanReadableImage(props.option)" :src="field.enumIdToHumanReadableImage(props.option)", :alt="field.enumIdToHumanReadable(props.option)")
                span.option__desc
                    span.option__label {{ field.enumIdToHumanReadable(props.option) }}
            template(slot="option" slot-scope="props")
                img.option__image(v-if="field.enumIdToHumanReadableImage(props.option) && show_option_image" :src="field.enumIdToHumanReadableImage(props.option)", :alt="field.enumIdToHumanReadable(props.option)")
                .option__desc
                    span.option__label {{ field.enumIdToHumanReadable(props.option) }}

    template(v-else-if="field_type == 'float[]'")
        Multiinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value", :id="input_elt_id" :vo="vo", :field="field",
            :required="field.is_required", :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))",
            type_input="number", @input_with_infos="validateMultiInput")
    template(v-else-if="field_type == 'number[]'")
        Multiinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value"
            :id="input_elt_id"
            vo="vo"
            :field="field"
            :required="field.is_required", :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))"
            type_input="number"
            input_step='any'
            @input_with_infos="validateMultiInput")
    template(v-else-if="field_type == 'text[]'")
        Multiinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            v-model="field_value", :id="input_elt_id" :vo="vo", :field="field", :required="field.is_required",
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))", type_input="text",
            @input_with_infos="validateMultiInput")
    template(v-else-if="field_type == 'html_array'")
        Multiinputcomponent(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :inline_input_mode='inline_input_mode'
            :id="input_elt_id" :use_wysiwyg='true' v-model="field_value", :vo="vo", :field="field", :required="field.is_required",
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))", type_input="text",
            @input_with_infos="validateMultiInput")
    template(v-else-if="is_custom_field_type && custom_field_types[field_type].create_update_component")
        .custom_read_field_component(
            :class="{'valign-middle': show_pencil_btn}"
            ref="input_elt"
            :id="input_elt_id",
            :is="custom_field_types[field_type].create_update_component",
            :vo="vo",
            :field="field",
            :required="field.is_required"
            :disabled="is_readonly || (inline_input_mode && ((!inline_input_is_editing) || inline_input_is_busy))",
            @input="inputValue"
        )
    template(v-else-if="field_type == 'point'")
        // FIXME TODO ASAP

    template(v-if='inverse_label')
        include ./CRUDComponentFieldLabel

    include ./CRUDComponentFieldFooter

