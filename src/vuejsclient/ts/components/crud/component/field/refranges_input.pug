.form-group(:class="{[field_type]:true, inline_input_mode:inline_input_mode, auto_validate_inline_input:auto_validate_inline_input, has_alert:(get_alerts && get_alerts[alert_path] && (get_alerts[alert_path].length > 0))}" @click='try_prepare_inline_input')
    template(v-if='inline_input_mode && (!is_disabled) && (!inline_input_mode_input_only) && (!auto_validate_inline_input)')
        template(v-if='!inline_input_is_editing')
            template(v-if='inline_input_show_clear && !field.is_required')
                i.inline_input_show_clear.fa.fa-trash.btn-danger(@click='inline_clear_value' :class="{busy: inline_input_is_busy}")
            template(v-else)
                i.inline_input_hide_clear.fa.fa-circle-arrow-right.btn-info(:class="{busy: inline_input_is_busy}")
        template(v-else)
            i.inline_input_cancel_input.fa.fa-undo.btn-warning(@click='cancel_input' :class="{busy: inline_input_is_busy}")

    Alertcomponent.datatable_field_alert.refranges_datatable_field_alert(:path='alert_path')
    label {{ label_replacement ? label(label_replacement) : t(field.translatable_title) }}
        template(v-if="field.is_required")
            i.fa-duotone.fa-asterisk.mandatory

    //- .btn-group.link_ref.hidden-print(v-show='can_insert_or_update_target && show_insert_or_update_target')
    //-     template(v-if="field_value")
    //-         a.btn.btn-sm.btn-primary.mr-1(:href="get_crud_link(field.targetModuleTable.vo_type, field_value)" :target="!is_dashboard_builder ? '_blank' : ''")
    //-             i.fa-duotone.fa-pencil

    //-     a.btn.btn-sm.btn-success(:href="get_crud_link(field.targetModuleTable.vo_type, null)" :target="!is_dashboard_builder ? '_blank' : ''")
    //-         i.fa-duotone.fa-plus-circle
    .btn-group.link_ref.hidden-print(v-show='can_insert_or_update_target && show_insert_or_update_target')
        //- template(v-if="field_value")
        //-     a.btn.btn-sm.btn-primary.mr-1(@click="set_show_inline_form_in_crud(false)")
        //-         i.fa-duotone.fa-pencil
        a.btn.btn-sm.btn-success(@click="set_show_inline_form_in_crud(true)")
            i.fa-duotone.fa-plus-circle

    template(v-if='field.can_use_async_load_options')
        //- div PASTEQUE
        multiselect(
            v-if='can_insert_or_update_target_first_loading_ok'
                
            v-model="async_load_options_field_value",
            label="label"
            :options="filter_visible_options",
            :placeholder="t(placeholder_string)",
            :multiple="true"
            :close-on-select="false"
            autocomplete="off"
            :internal-search="false",
            :searchable="true",
            
            :id="field.datatable_field_uid",
            :allow-empty="!field.is_required",
            :disabled="is_readonly",


            @input="onChangeField",
            :loading="isLoadingOptions",
            
            track-by="id",

            :select-label='label("multiselect.selectLabel")'
            :select-group-label='label("multiselect.selectGroupLabel")'
            :selected-label='label("multiselect.selectedLabel")'
            :deselect-label='label("multiselect.deselectLabel")'
            :deselect-group-label='label("multiselect.deselectGroupLabel")'

            @search-change="query_update_visible_options"
        )

            span(slot="noOptions") -

            template(slot="option", slot-scope="props")
                span.option__title {{ props.option.label }}

            template(slot="tag", slot-scope="props")
                .pill_wrapper.bg-success
                    span.option__tag {{ props.option.label }}
                    i.fa-solid.fa-square-x(@click='props.remove(props.option)')

            //- ??? track-by="text_uid"
        
        template(v-if="!is_readonly && !hide_text_cliquable")
            .text_cliquable.ml-1(@click='select_all_async') {{ label('select_all') }}
            .inter_text -
            .text_cliquable(@click='select_none') {{ label('select_none') }}

        include ./CRUDComponentFieldFooter

    template(v-else)
        //- div RAAAAAAAAAAAAAAAA
        multiselect(
            v-model="async_load_options_field_value",

            label="label",
            :options="select_options",
            :placeholder="t(placeholder_string)",
            :loading="isLoadingOptions",
            autocomplete="off"
            :id="field.datatable_field_uid",
            :searchable="searchable",
            :internal-search="false",
            :allow-empty="!field.is_required",
            :preselect-first="false",
            :disabled="is_readonly",
            @search-change="asyncLoadOptions",
            @input="onChangeField",
            :multiple="true"
            :close-on-select="false"
            track-by="id",

            :select-label='label("multiselect.selectLabel")'
            :select-group-label='label("multiselect.selectGroupLabel")'
            :selected-label='label("multiselect.selectedLabel")'
            :deselect-label='label("multiselect.deselectLabel")'
            :deselect-group-label='label("multiselect.deselectGroupLabel")'
        )
        template(v-if="!is_readonly && !hide_text_cliquable")
            .text_cliquable.ml-1(@click='select_all') {{ label('select_all') }}
            .inter_text -
            .text_cliquable(@click='select_none') {{ label('select_none') }}

        include ./CRUDComponentFieldFooter