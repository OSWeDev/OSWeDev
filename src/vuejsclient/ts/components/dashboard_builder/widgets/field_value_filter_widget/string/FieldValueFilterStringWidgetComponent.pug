.field_value_filter_string_widget_component
    template(v-if='vo_field_ref')
        .vo_field_ref_label {{ vo_field_ref_label }}
        template(v-if="!is_checkbox")
            template(v-if="!hide_btn_switch_advanced")
                .vo_field_ref_advanced
                    toggle-button(
                        @change="toggle_advanced_filters" 
                        :value="is_advanced_filters" 
                        :sync="true"
                        :width="100"
                        :labels="{checked: label('vo_field_ref_advanced.advanced_filters.visible'), unchecked: label('vo_field_ref_advanced.advanced_filters.hidden')}")
                        

        template(v-if='is_advanced_filters')
            .vo_field_advanced_string_filters
                template(v-for='(advanced_string_filter, i) in advanced_string_filters')
                    .vo_field_advanced_string_filter
                        form(v-on:submit.prevent="validate_advanced_string_filter")
                            template(v-if="!hide_advanced_string_filter_type")
                                .advanced_string_filter_type
                                    multiselect(
                                        :preselect-first="true"
                                        :multiple="false"
                                        :close-on-select="true"
                                        v-model="advanced_string_filter.filter_type"
                                        :options="filter_type_options"
                                        :custom-label="filter_type_label"
                                        autocomplete="off"
                                        :show-labels="false"
                                        :searchable="false"
                                        :internal-search="false"
                                        :hide-selected="false"

                                        :key="'advanced_string_filter_type' + vo_field_ref.api_type_id + '__' + vo_field_ref.field_id + '__' + i" 
                                        
                                        :select-label='label("multiselect.selectLabel")'
                                        :select-group-label='label("multiselect.selectGroupLabel")'
                                        :selected-label='label("multiselect.selectedLabel")'
                                        :deselect-label='label("multiselect.deselectLabel")'
                                        :deselect-group-label='label("multiselect.deselectGroupLabel")'
                                    )

                            .advanced_string_filter_content(v-if='has_content_filter_type[advanced_string_filter.filter_type]', :class="{hide_advanced_string_filter_type: hide_advanced_string_filter_type}")
                                input(
                                    v-model='advanced_string_filter.filter_content' 
                                    :placeholder='advanced_mode_placeholder' 
                                    @change="onchange_advanced_string_filter_content"
                                )
                            template(v-if='parseInt(i.toString()) == (advanced_string_filters.length - 1)')
                                //- .advanced_string_filter_add_filter(v-tooltip.top='label("advanced_filters.add")' @click='add_advanced_string_filter')
                                //-     i.fa-solid.fa-plus-circle.fa-lg.btn_icon
                                template(v-if="!autovalidate_advanced_filter || active_field_on_autovalidate_advanced_filter")
                                    .advanced_string_filter_validate_filter(v-tooltip.top='label("advanced_filters.validate")' @click='validate_advanced_string_filter' :class='{"disabled": !is_advanced_filter_valid}')
                                        i.fa-duotone.fa-check-circle.fa-lg.btn_icon
                            template(v-else)
                                .advanced_string_filter_link_type(v-tooltip.top='label("advanced_filters.link_type")' @click='switch_link_type(advanced_string_filter)')
                                    i.fa-duotone.fa-circle.fa-lg.btn_icon
                                    .link_type {{ t(link_type_labels[advanced_string_filter.link_type]) }}
                                .advanced_string_filter_delete_filter(v-tooltip.top='label("advanced_filters.delete")' @click='delete_advanced_string_filter(parseInt(i.toString()))')
                                    i.fa-duotone.fa-trash.fa-lg.btn_icon
                            
                template 
                    template(v-if="can_select_all")
                        .text_cliquable(@click='handle_select_all') {{ label('select_all') }}
                        template(v-if="can_select_all && can_select_none")
                            .inter_text -
                    template(v-if="can_select_none")
                        .text_cliquable(@click='handle_select_none') {{ label('select_none') }}

                        
        template(v-else)
            .vo_field_ref_filter                
                template(v-if="is_checkbox")
                    template(v-if="show_search_field")
                        .search_field.mb-2
                            input.form-control(type="text" v-model="search_field_checkbox" @input="debounced_query_update_visible_options_checkbox")
                    .container_filter_opt(:class="{has_search_field: show_search_field, has_vo_field_ref_label: vo_field_ref_label}")
                        template(v-if="separation_active_filter")
                            .row
                                template(v-for="(active_options, column_index) in tmp_filter_active_options_by_column")
                                    div(:class='div_column_class')
                                        template(v-for="(opt, index) in active_options")
                                            .filter_opt
                                                input(:type="(can_select_multiple) ? 'checkbox' : 'radio'" :id="opt.label + '_' + column_index + '_' + index" name="filter_opt" :key="opt.label" :checked="true" @change="handle_change_filter_opt_input($event.target, opt)")                            
                                                template(v-if='is_translatable_type')
                                                    label.option__title.ml-2(:for="opt.label + '_' + column_index + '_' + index") {{ label(opt.label) }}
                                                template(v-else)
                                                    label.option__title.ml-2(:for="opt.label + '_' + column_index + '_' + index") {{ opt.label }}
                            hr(v-if="tmp_filter_active_options && (tmp_filter_active_options.length > 0)")
                        
                        .row
                            template(v-for="(visible_options, column_index) in filter_visible_options_by_column")
                                div(:class='div_column_class')
                                    template(v-for="(opt, index) in visible_options")
                                        .filter_opt
                                            input(:checked="tmp_filter_active_options.findIndex((e) => e.label == opt.label) >= 0" :type="(can_select_multiple) ? 'checkbox' : 'radio'" :id="base_filter + '_' + column_index + '_' + index" name="filter_opt" :key="opt.label" @change="handle_change_filter_opt_input($event.target, opt)")                            
                                            template(v-if='is_translatable_type')
                                                label.option__title.ml-2(:for="base_filter + '_' + column_index + '_' + index") {{ label(opt.label) }}
                                            template(v-else)
                                                label.option__title.ml-2(:for="base_filter + '_' + column_index + '_' + index") {{ opt.label }}
                                            
                                            template(v-if="!hide_lvl2_if_lvl1_not_selected || (active_option_lvl1[opt.label])")
                                                template(v-if="filter_visible_options_lvl2 && filter_visible_options_lvl2[opt.label]")
                                                    .container_filter_opt_lvl2.ml-3
                                                        template(v-for="(opt_lvl2, index_lvl2) in filter_visible_options_lvl2[opt.label]")
                                                            .filter_opt_lvl2
                                                                input(:type="(can_select_multiple) ? 'checkbox' : 'radio'" :id="base_filter + '_' + column_index + '_' + index + '_lvl2_' + index_lvl2" name="filter_opt" @change="onchange_filter_opt_lvl2_input($event.target, opt_lvl2, opt)")
                                                                template(v-if='is_translatable_type')
                                                                    label.option__title.ml-2(:for="base_filter + '_' + column_index + '_' + index + '_lvl2_' + index_lvl2") {{ label(opt_lvl2.label) }}
                                                                template(v-else)
                                                                    label.option__title.ml-2(:for="base_filter + '_' + column_index + '_' + index + '_lvl2_' + index_lvl2") {{ opt_lvl2.label }}

                        template 
                            template(v-if="can_select_all")
                                .text_cliquable(@click='handle_select_all') {{ label('select_all') }}
                                template(v-if="can_select_all && can_select_none")
                                    .inter_text -
                            template(v-if="can_select_none")
                                .text_cliquable(@click='handle_select_none') {{ label('select_none') }}
                        

                template(v-else-if="is_button")
                    template(v-for="filter_visible_opt in filter_visible_options")
                        .btn.btn-info.button_opacity.mr-1(
                            @click="select_option(filter_visible_opt)"
                            :class="{'active': (tmp_filter_active_options && tmp_filter_active_options.find((e) => e.label == filter_visible_opt.label))}"
                        ) 
                            template(v-if='is_translatable_type')
                                span.option__title {{ label(filter_visible_opt.label) }}
                            template(v-else)
                                span.option__title {{ filter_visible_opt.label }}

                template(v-else)
                    multiselect(
                        :preselect-first="false"
                        :multiple="can_select_multiple"
                        :close-on-select="false"
                        v-model="tmp_filter_active_options"
                        :placeholder="placeholder"
                        :options="filter_visible_options"
                        label="label"
                        autocomplete="off"

                        :searchable="true"
                        :internal-search="false"
                        :hide-selected="true"

                        track-by="text_uid"
                        
                        :key="'field_value_filter_widget_component_' + vo_field_ref.api_type_id + '__' + vo_field_ref.field_id"
                        
                        :select-label='label("multiselect.selectLabel")'
                        :select-group-label='label("multiselect.selectGroupLabel")'
                        :selected-label='label("multiselect.selectedLabel")'
                        :deselect-label='label("multiselect.deselectLabel")'
                        :deselect-group-label='label("multiselect.deselectGroupLabel")'

                        @search-change="query_update_visible_options"
                    )
                        
                        span(slot="noOptions") -

                        template(slot="option", slot-scope="props")
                            template(v-if='is_translatable_type')
                                span.option__title {{ label(props.option.label) }}
                            template(v-else)
                                span.option__title {{ props.option.label }}

                        template(slot="tag", slot-scope="props")
                            .pill_wrapper.bg-success
                                template(v-if='is_translatable_type')
                                    span.option__tag {{ label(props.option.label) }}
                                template(v-else)
                                    span.option__tag {{ props.option.label }}
                                i.fa-duotone.fa-times(@click='props.remove(props.option)')
                    
                    template 
                        template(v-if="can_select_all")
                            .text_cliquable(@click='handle_select_all') {{ label('select_all') }}
                            template(v-if="can_select_all && can_select_none")
                                .inter_text -
                        template(v-if="can_select_none")
                            .text_cliquable(@click='handle_select_none') {{ label('select_none') }}
